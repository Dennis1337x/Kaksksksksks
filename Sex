const { EventEmitterAsyncResource } = require('events');
const fetch = require('node-fetch');
const WebSocket = require('ws');
const colors = require('colors');
const fs = require('fs');
const config = JSON.parse(fs.readFileSync('config.json', 'utf-8'));

colors.setTheme({
    x1: ['grey', 'bold'],
    r: ['red', 'bold'],
    ss: ['green', 'italic'],
    v: ['red', 'bold']
});

class Sniper {
    constructor() {
        this.guilds = {};
        this.connectWebSocket();
        this.updateTitle();
    }

    connectWebSocket() {
        this.socket = new WebSocket('wss://gateway.discord.gg/?v=9&encoding=json&shard=0&shardcount=1&region=afg-east');
        this.socket.on('open', async () => {
            this.socket.send(JSON.stringify({
                op: 2,
                d: {
                    token: config.t,
                    intents: 513,
                    properties: {
                        os: 'macos',
                        browser: 'Safari',
                        device: 'MacBook Air'
                    }
                }
            }));
        });

        this.socket.on('close', () => {
            console.log('Reconnecting...'.r);
            setTimeout(() => {
                this.connectWebSocket();
            }, 100);
        });

        this.socket.on('message', async message => {
            const data = JSON.parse(message);
            switch (data.t) {
                case 'GUILD_UPDATE':
                    this.handleGuildUpdate(data.d);
                    break;
                case 'READY':
                    this.handleReady(data.d);
                    break;
                case 'GUILD_CREATE':
                    this.handleGuildCreate(data.d);
                    break;
                case 'GUILD_DELETE':
                    this.handleGuildDelete(data.d);
                    break;
            }
        });

        this.socket.on('error', error => {
            console.error(error);
            process.exit(1);
        });
    }

    handleGuildUpdate(guildData) {
        const guild = this.guilds[guildData.guild_id];
        if (guild?.vanity_url_code && guild.vanity_url_code !== guildData.vanity_url_code) {
            this.snipeVanityURL(guild.vanity_url_code, guildData.guild_id);
        }
    }

    async snipeVanityURL(vanityUrlCode, guildId, delay = Math.floor(Math.random() * 6)) {
        const startTime = Date.now();
        try {
            const response = await fetch(`https://canary.discord.com/api/v10/guilds/${config.s}/vanity-url`, {
                method: 'PATCH',
                body: JSON.stringify({ code: vanityUrlCode }),
                headers: {
                    'Authorization': config.t,
                    'Content-Type': 'application/json'
                }
            });

            const elapsedTime = Date.now() - startTime;
            if (response.ok) {
                console.log(`Success: ${vanityUrlCode} in ${elapsedTime}ms`.ss);
                this.sendWebhookRequest(config.h, {
                    title: 'SUCCESS',
                    description: `ID: ${config.s}\nURL: ${vanityUrlCode}\nTime: ${elapsedTime}ms`,
                    color: 0x00ff00
                });
            } else {
                console.error(`Failed: ${vanityUrlCode}`);
                this.sendWebhookRequest(config.h, {
                    title: 'FAILED',
                    description: `ID: ${config.s}\nURL: ${vanityUrlCode}\nStatus: ${response.status}`,
                    color: 0xff0000
                });
            }
        } catch (error) {
            console.error(`Error sniping vanity URL: ${vanityUrlCode}`, error);
        } finally {
            delete this.guilds[guildId];
        }
    }

    handleReady(data) {
        data.guilds.filter(guild => typeof guild.vanity_url_code === 'string').forEach(guild => {
            this.guilds[guild.id] = {
                vanity_url_code: guild.vanity_url_code,
                boostCount: guild.premium_subscription_count
            };
            this.printGuildInfo(guild);
        });
        this.updateTitle();
    }

    handleGuildCreate(guildData) {
        this.guilds[guildData.id] = { vanity_url_code: guildData.vanity_url_code };
        this.printGuildInfo(guildData);
        this.updateTitle();
    }

    handleGuildDelete(guildData) {
        const guild = this.guilds[guildData.id];
        if (guild?.vanity_url_code) {
            setTimeout(() => {
                this.snipeVanityURL(guild.vanity_url_code, guildData.id);
            }, 50);
        }
    }

    updateTitle() {
        const guildCount = Object.keys(this.guilds).length;
        process.title = `Exelans - ${guildCount} guilds`;
    }

    printGuildInfo(guild) {
        const info = `> URL: ${guild.vanity_url_code} ID: ${config.s} SVR: ${guild.name} BST: ${guild.premium_subscription_count}`;
        console.log(info.x1);
    }

    async sendWebhookRequest(webhookUrl, embed) {
        try {
            const response = await fetch(webhookUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ embeds: [embed] })
            });

            if (!response.ok) {
                console.error(`Webhook request failed with status: ${response.status}`);
                const responseBody = await response.text();
                console.error(`Response content: ${responseBody}`);
            }
        } catch (error) {
            console.error('Error sending the webhook request:', error);
        }
    }
}

const sniper = new Sniper();
